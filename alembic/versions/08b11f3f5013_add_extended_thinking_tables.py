"""Add extended thinking tables

Revision ID: 08b11f3f5013
Revises: 
Create Date: 2025-10-06 15:02:01.499336

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '08b11f3f5013'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('model_capability_profiles',
    sa.Column('id', sa.String(length=36), nullable=False, comment='Unique identifier for the capability profile'),
    sa.Column('model_id', sa.String(length=255), nullable=False, comment="Unique identifier for the AI model (e.g., 'mistral:latest')"),
    sa.Column('model_name', sa.String(length=255), nullable=True, comment='Human-readable name for the model'),
    sa.Column('capabilities', sa.JSON(), nullable=False, comment='List of capability types this model excels at'),
    sa.Column('average_latency_ms', sa.Float(), nullable=True, comment='Average response latency in milliseconds'),
    sa.Column('average_tokens_per_second', sa.Float(), nullable=True, comment='Average tokens generated per second'),
    sa.Column('success_rate', sa.Float(), nullable=False, comment='Success rate (0.0 to 1.0)'),
    sa.Column('total_requests', sa.Integer(), nullable=False, comment='Total number of requests processed'),
    sa.Column('failed_requests', sa.Integer(), nullable=False, comment='Number of failed requests'),
    sa.Column('average_quality_score', sa.Float(), nullable=True, comment='Average quality score from evaluations (0.0 to 1.0)'),
    sa.Column('capability_scores', sa.JSON(), nullable=True, comment='Scores for each capability type'),
    sa.Column('estimated_memory_mb', sa.Integer(), nullable=True, comment='Estimated memory requirement in MB'),
    sa.Column('requires_gpu', sa.Boolean(), nullable=False, comment='Whether this model requires GPU'),
    sa.Column('max_concurrent_requests', sa.Integer(), nullable=False, comment='Maximum concurrent requests this model can handle'),
    sa.Column('is_active', sa.Boolean(), server_default='1', nullable=False, comment='Whether this model is active and available for routing'),
    sa.Column('priority', sa.Integer(), nullable=False, comment='Priority level for routing (higher = preferred)'),
    sa.Column('routing_weight', sa.Float(), nullable=False, comment='Weight for load-balanced routing'),
    sa.Column('model_metadata', sa.JSON(), nullable=True, comment='Additional model metadata'),
    sa.Column('tags', sa.JSON(), nullable=True, comment='Tags for categorization'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False, comment='When the profile was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False, comment='When the profile was last updated'),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True, comment='When the model was last used'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_model_capability_profiles_model_id'), 'model_capability_profiles', ['model_id'], unique=True)
    op.create_table('routing_decisions',
    sa.Column('id', sa.String(length=36), nullable=False, comment='Unique identifier for the routing decision'),
    sa.Column('session_id', sa.String(length=36), nullable=True, comment='Associated session ID'),
    sa.Column('request_text', sa.Text(), nullable=True, comment='Original request text (for analysis)'),
    sa.Column('detected_capabilities', sa.JSON(), nullable=False, comment='Capabilities detected in the request'),
    sa.Column('chosen_model_id', sa.String(length=255), nullable=False, comment='Model that was chosen for this request'),
    sa.Column('routing_strategy', sa.String(length=50), nullable=False, comment='Strategy used for routing'),
    sa.Column('routing_score', sa.Float(), nullable=True, comment='Routing score that led to this decision'),
    sa.Column('alternative_models', sa.JSON(), nullable=True, comment='Alternative models that were considered'),
    sa.Column('latency_ms', sa.Float(), nullable=True, comment='Actual latency for this request'),
    sa.Column('tokens_generated', sa.Integer(), nullable=True, comment='Number of tokens generated'),
    sa.Column('success', sa.Boolean(), nullable=False, comment='Whether the request was successful'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if request failed'),
    sa.Column('quality_score', sa.Float(), nullable=True, comment='Quality score for the response (if evaluated)'),
    sa.Column('routing_metadata', sa.JSON(), nullable=True, comment='Additional routing metadata'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False, comment='When the routing decision was made'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='When the request completed'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_routing_decisions_chosen_model_id'), 'routing_decisions', ['chosen_model_id'], unique=False)
    op.create_index(op.f('ix_routing_decisions_session_id'), 'routing_decisions', ['session_id'], unique=False)
    op.create_table('thinking_sessions',
    sa.Column('id', sa.String(length=36), nullable=False, comment='Unique identifier for the thinking session'),
    sa.Column('original_question', sa.Text(), nullable=False, comment='The question or problem to think about'),
    sa.Column('thinking_duration_minutes', sa.Integer(), nullable=False, comment='Allocated thinking time in minutes'),
    sa.Column('model_id', sa.String(length=255), nullable=False, comment='AI model used for thinking'),
    sa.Column('status', sa.Enum('created', 'thinking', 'paused', 'completed', 'failed', name='thinking_status_enum'), nullable=False, comment='Current status of the thinking session'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True, comment='When thinking started'),
    sa.Column('paused_at', sa.DateTime(timezone=True), nullable=True, comment='When thinking was paused'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='When thinking completed'),
    sa.Column('total_thoughts', sa.Integer(), nullable=False, comment='Total number of thoughts generated'),
    sa.Column('total_questions', sa.Integer(), nullable=False, comment='Total number of sub-questions generated'),
    sa.Column('total_syntheses', sa.Integer(), nullable=False, comment='Total number of syntheses created'),
    sa.Column('current_focus', sa.Text(), nullable=True, comment='What the AI is currently thinking about'),
    sa.Column('final_synthesis', sa.Text(), nullable=True, comment='Final answer/synthesis after thinking'),
    sa.Column('confidence_evolution', sa.JSON(), nullable=True, comment='Confidence scores over time (0.0-1.0)'),
    sa.Column('session_metadata', sa.JSON(), nullable=True, comment='Additional session metadata'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if session failed'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False, comment='When the session was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False, comment='When the session was last updated'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sub_questions',
    sa.Column('id', sa.String(length=36), nullable=False, comment='Unique identifier for the sub-question'),
    sa.Column('session_id', sa.String(length=36), nullable=False, comment='The thinking session that generated this question'),
    sa.Column('question_text', sa.Text(), nullable=False, comment='The sub-question text'),
    sa.Column('priority', sa.Integer(), nullable=False, comment='Priority/importance (1-10, higher = more important)'),
    sa.Column('explored', sa.Boolean(), nullable=False, comment='Has this question been explored yet?'),
    sa.Column('insights_gained', sa.Text(), nullable=True, comment='What was learned from exploring this question'),
    sa.Column('generated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False, comment='When the question was generated'),
    sa.Column('explored_at', sa.DateTime(timezone=True), nullable=True, comment='When the question was explored'),
    sa.ForeignKeyConstraint(['session_id'], ['thinking_sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sub_questions_session_id'), 'sub_questions', ['session_id'], unique=False)
    op.create_table('thinking_syntheses',
    sa.Column('id', sa.String(length=36), nullable=False, comment='Unique identifier for the synthesis'),
    sa.Column('session_id', sa.String(length=36), nullable=False, comment='The thinking session this synthesis belongs to'),
    sa.Column('sequence_number', sa.Integer(), nullable=False, comment='Order in synthesis sequence (0-indexed)'),
    sa.Column('synthesis_text', sa.Text(), nullable=False, comment='Current understanding summary'),
    sa.Column('key_insights', sa.JSON(), nullable=False, comment='Key insights at this point'),
    sa.Column('confidence_level', sa.Float(), nullable=False, comment='Overall confidence in current understanding (0.0-1.0)'),
    sa.Column('remaining_questions', sa.JSON(), nullable=False, comment='Questions that remain unclear'),
    sa.Column('time_offset_seconds', sa.Integer(), nullable=False, comment='Seconds since thinking session started'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False, comment='When the synthesis was created'),
    sa.ForeignKeyConstraint(['session_id'], ['thinking_sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_thinking_syntheses_session_id'), 'thinking_syntheses', ['session_id'], unique=False)
    op.create_table('thoughts',
    sa.Column('id', sa.String(length=36), nullable=False, comment='Unique identifier for the thought'),
    sa.Column('session_id', sa.String(length=36), nullable=False, comment='The thinking session this thought belongs to'),
    sa.Column('sequence_number', sa.Integer(), nullable=False, comment='Order in the thinking stream (0-indexed)'),
    sa.Column('thought_text', sa.Text(), nullable=False, comment='The actual thought content'),
    sa.Column('thought_type', sa.Enum('exploration', 'critique', 'connection', 'insight', 'question', 'synthesis', name='thought_type_enum'), nullable=False, comment='Type of thought'),
    sa.Column('related_to_question_id', sa.String(length=36), nullable=True, comment='Sub-question this thought addresses (if any)'),
    sa.Column('confidence', sa.Float(), nullable=False, comment='Confidence level in this thought (0.0-1.0)'),
    sa.Column('importance', sa.Float(), nullable=True, comment='Importance score (0.0-1.0)'),
    sa.Column('time_offset_seconds', sa.Integer(), nullable=False, comment='Seconds since thinking session started'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False, comment='When the thought was generated'),
    sa.ForeignKeyConstraint(['related_to_question_id'], ['sub_questions.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['session_id'], ['thinking_sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_thoughts_session_id'), 'thoughts', ['session_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_thoughts_session_id'), table_name='thoughts')
    op.drop_table('thoughts')
    op.drop_index(op.f('ix_thinking_syntheses_session_id'), table_name='thinking_syntheses')
    op.drop_table('thinking_syntheses')
    op.drop_index(op.f('ix_sub_questions_session_id'), table_name='sub_questions')
    op.drop_table('sub_questions')
    op.drop_table('thinking_sessions')
    op.drop_index(op.f('ix_routing_decisions_session_id'), table_name='routing_decisions')
    op.drop_index(op.f('ix_routing_decisions_chosen_model_id'), table_name='routing_decisions')
    op.drop_table('routing_decisions')
    op.drop_index(op.f('ix_model_capability_profiles_model_id'), table_name='model_capability_profiles')
    op.drop_table('model_capability_profiles')
    # ### end Alembic commands ###
